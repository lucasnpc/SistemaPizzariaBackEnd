// <auto-generated />
using System;
using BackEndPizzaria.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BackEndPizzaria.Migrations
{
    [DbContext(typeof(RestaurantePizzariaContext))]
    [Migration("20210207232744_Fix")]
    partial class Fix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("BackEndPizzaria.Models.ClienteFidelizado", b =>
                {
                    b.Property<string>("cpfCliente")
                        .HasColumnType("text");

                    b.Property<string>("bairro")
                        .HasColumnType("text");

                    b.Property<string>("cidade")
                        .HasColumnType("text");

                    b.Property<string>("nome")
                        .HasColumnType("text");

                    b.Property<string>("numero")
                        .HasColumnType("text");

                    b.Property<string>("rua")
                        .HasColumnType("text");

                    b.Property<string>("telefone")
                        .HasColumnType("text");

                    b.HasKey("cpfCliente");

                    b.ToTable("clientesFidelizados");
                });

            modelBuilder.Entity("BackEndPizzaria.Models.ClienteNaoFidelizado", b =>
                {
                    b.Property<int>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("bairro")
                        .HasColumnType("text");

                    b.Property<string>("cidade")
                        .HasColumnType("text");

                    b.Property<string>("nome")
                        .HasColumnType("text");

                    b.Property<string>("numero")
                        .HasColumnType("text");

                    b.Property<string>("rua")
                        .HasColumnType("text");

                    b.Property<string>("telefone")
                        .HasColumnType("text");

                    b.HasKey("IdCliente");

                    b.ToTable("clientesNaoFidelizados");
                });

            modelBuilder.Entity("BackEndPizzaria.Models.Comanda", b =>
                {
                    b.Property<int>("idComanda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("itensidItem")
                        .HasColumnType("integer");

                    b.Property<string>("numeroMesa")
                        .HasColumnType("text");

                    b.Property<double>("valorConta")
                        .HasColumnType("double precision");

                    b.HasKey("idComanda");

                    b.HasIndex("itensidItem");

                    b.ToTable("comandas");
                });

            modelBuilder.Entity("BackEndPizzaria.Models.ContasAPagar", b =>
                {
                    b.Property<int>("idConta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("dataPagamento")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("descricao")
                        .HasColumnType("text");

                    b.Property<bool>("ehFixa")
                        .HasColumnType("boolean");

                    b.Property<string>("tipoServico")
                        .HasColumnType("text");

                    b.Property<double>("valor")
                        .HasColumnType("double precision");

                    b.HasKey("idConta");

                    b.ToTable("contasPagar");
                });

            modelBuilder.Entity("BackEndPizzaria.Models.ContasAReceber", b =>
                {
                    b.Property<int>("idConta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("dataRecebido")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("descricao")
                        .HasColumnType("text");

                    b.Property<double>("valor")
                        .HasColumnType("double precision");

                    b.HasKey("idConta");

                    b.ToTable("contasReceber");
                });

            modelBuilder.Entity("BackEndPizzaria.Models.Fornecedor", b =>
                {
                    b.Property<string>("cnpj")
                        .HasColumnType("text");

                    b.Property<string>("bairro")
                        .HasColumnType("text");

                    b.Property<string>("cidade")
                        .HasColumnType("text");

                    b.Property<string>("numero")
                        .HasColumnType("text");

                    b.Property<string>("razaoSocial")
                        .HasColumnType("text");

                    b.Property<string>("rua")
                        .HasColumnType("text");

                    b.Property<string>("telefone")
                        .HasColumnType("text");

                    b.HasKey("cnpj");

                    b.ToTable("fornecedor");
                });

            modelBuilder.Entity("BackEndPizzaria.Models.Funcionario", b =>
                {
                    b.Property<string>("cpf")
                        .HasColumnType("text");

                    b.Property<string>("bairro")
                        .HasColumnType("text");

                    b.Property<string>("cargo")
                        .HasColumnType("text");

                    b.Property<string>("cidade")
                        .HasColumnType("text");

                    b.Property<DateTime>("dataAdmissao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("dataNascimento")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("nome")
                        .HasColumnType("text");

                    b.Property<string>("numero")
                        .HasColumnType("text");

                    b.Property<string>("rua")
                        .HasColumnType("text");

                    b.Property<string>("telefone")
                        .HasColumnType("text");

                    b.HasKey("cpf");

                    b.ToTable("funcionarios");
                });

            modelBuilder.Entity("BackEndPizzaria.Models.Itens", b =>
                {
                    b.Property<int>("idItem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("descricao")
                        .HasColumnType("text");

                    b.Property<double>("preco")
                        .HasColumnType("double precision");

                    b.HasKey("idItem");

                    b.ToTable("itensCardapio");
                });

            modelBuilder.Entity("BackEndPizzaria.Models.Negocio", b =>
                {
                    b.Property<string>("idNegocio")
                        .HasColumnType("text");

                    b.Property<string>("bairroNegocio")
                        .HasColumnType("text");

                    b.Property<string>("cidadeNegocio")
                        .HasColumnType("text");

                    b.Property<string>("estadoNegocio")
                        .HasColumnType("text");

                    b.Property<string>("nomeNegocio")
                        .HasColumnType("text");

                    b.Property<string>("numeroNegocio")
                        .HasColumnType("text");

                    b.Property<string>("ruaNegocio")
                        .HasColumnType("text");

                    b.HasKey("idNegocio");

                    b.ToTable("negocios");
                });

            modelBuilder.Entity("BackEndPizzaria.Models.Pedido", b =>
                {
                    b.Property<int>("idPedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("bairroEntrega")
                        .HasColumnType("text");

                    b.Property<string>("cidadeEntrega")
                        .HasColumnType("text");

                    b.Property<string>("clienteFidelizadocpfCliente")
                        .HasColumnType("text");

                    b.Property<int?>("itensidItem")
                        .HasColumnType("integer");

                    b.Property<string>("numeroEntrega")
                        .HasColumnType("text");

                    b.Property<string>("ruaEntrega")
                        .HasColumnType("text");

                    b.Property<double>("valorConta")
                        .HasColumnType("double precision");

                    b.HasKey("idPedido");

                    b.HasIndex("clienteFidelizadocpfCliente");

                    b.HasIndex("itensidItem");

                    b.ToTable("pedidos");
                });

            modelBuilder.Entity("BackEndPizzaria.Models.Produto", b =>
                {
                    b.Property<string>("idProduto")
                        .HasColumnType("text");

                    b.Property<string>("descricao")
                        .HasColumnType("text");

                    b.Property<double>("estoqueMaximo")
                        .HasColumnType("double precision");

                    b.Property<double>("estoqueMinimo")
                        .HasColumnType("double precision");

                    b.Property<string>("idFornecedorcnpj")
                        .HasColumnType("text");

                    b.Property<int?>("idItem1")
                        .HasColumnType("integer");

                    b.Property<double>("quantidadeAtual")
                        .HasColumnType("double precision");

                    b.Property<double>("valorCusto")
                        .HasColumnType("double precision");

                    b.HasKey("idProduto");

                    b.HasIndex("idFornecedorcnpj");

                    b.HasIndex("idItem1");

                    b.ToTable("produtos");
                });

            modelBuilder.Entity("BackEndPizzaria.Models.Usuario", b =>
                {
                    b.Property<string>("userId")
                        .HasColumnType("text");

                    b.Property<string>("pizzariaidNegocio")
                        .HasColumnType("text");

                    b.Property<string>("userSenha")
                        .HasColumnType("text");

                    b.HasKey("userId");

                    b.HasIndex("pizzariaidNegocio");

                    b.ToTable("users");
                });

            modelBuilder.Entity("BackEndPizzaria.Models.Venda", b =>
                {
                    b.Property<string>("idVenda")
                        .HasColumnType("text");

                    b.Property<DateTime>("dataVenda")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("idComanda1")
                        .HasColumnType("integer");

                    b.Property<int?>("idPedido1")
                        .HasColumnType("integer");

                    b.Property<string>("tipoVenda")
                        .HasColumnType("text");

                    b.Property<double>("valorVenda")
                        .HasColumnType("double precision");

                    b.HasKey("idVenda");

                    b.HasIndex("idComanda1");

                    b.HasIndex("idPedido1");

                    b.ToTable("vendas");
                });

            modelBuilder.Entity("BackEndPizzaria.Models.Comanda", b =>
                {
                    b.HasOne("BackEndPizzaria.Models.Itens", "itens")
                        .WithMany()
                        .HasForeignKey("itensidItem");

                    b.Navigation("itens");
                });

            modelBuilder.Entity("BackEndPizzaria.Models.Pedido", b =>
                {
                    b.HasOne("BackEndPizzaria.Models.ClienteFidelizado", "clienteFidelizado")
                        .WithMany("pedidosCliente")
                        .HasForeignKey("clienteFidelizadocpfCliente");

                    b.HasOne("BackEndPizzaria.Models.Itens", "itens")
                        .WithMany()
                        .HasForeignKey("itensidItem");

                    b.Navigation("clienteFidelizado");

                    b.Navigation("itens");
                });

            modelBuilder.Entity("BackEndPizzaria.Models.Produto", b =>
                {
                    b.HasOne("BackEndPizzaria.Models.Fornecedor", "idFornecedor")
                        .WithMany("produtos")
                        .HasForeignKey("idFornecedorcnpj");

                    b.HasOne("BackEndPizzaria.Models.Itens", "idItem")
                        .WithMany("ingredientes")
                        .HasForeignKey("idItem1");

                    b.Navigation("idFornecedor");

                    b.Navigation("idItem");
                });

            modelBuilder.Entity("BackEndPizzaria.Models.Usuario", b =>
                {
                    b.HasOne("BackEndPizzaria.Models.Negocio", "pizzaria")
                        .WithMany("usersNegocio")
                        .HasForeignKey("pizzariaidNegocio");

                    b.Navigation("pizzaria");
                });

            modelBuilder.Entity("BackEndPizzaria.Models.Venda", b =>
                {
                    b.HasOne("BackEndPizzaria.Models.Comanda", "idComanda")
                        .WithMany()
                        .HasForeignKey("idComanda1");

                    b.HasOne("BackEndPizzaria.Models.Pedido", "idPedido")
                        .WithMany()
                        .HasForeignKey("idPedido1");

                    b.Navigation("idComanda");

                    b.Navigation("idPedido");
                });

            modelBuilder.Entity("BackEndPizzaria.Models.ClienteFidelizado", b =>
                {
                    b.Navigation("pedidosCliente");
                });

            modelBuilder.Entity("BackEndPizzaria.Models.Fornecedor", b =>
                {
                    b.Navigation("produtos");
                });

            modelBuilder.Entity("BackEndPizzaria.Models.Itens", b =>
                {
                    b.Navigation("ingredientes");
                });

            modelBuilder.Entity("BackEndPizzaria.Models.Negocio", b =>
                {
                    b.Navigation("usersNegocio");
                });
#pragma warning restore 612, 618
        }
    }
}
